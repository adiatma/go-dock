{"version":3,"sources":["model.js","store.js","components/TopNavigation.js","App.js","serviceWorker.js","index.js"],"names":["images","defaultState","loading","error","errorMessage","insertImages","action","state","payload","getImages","thunk","actions","a","axios","get","request","data","removeImage","delete","window","location","reload","alert","info","insertInfo","getInfo","diskUsage","disk","insertDiskUsage","getDiskUsage","disk_usage","container","deleteContainer","createStore","model","TopNavigation","React","isOpen","setIsOpen","style","marginBottom","Container","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","InfoLazy","ImagesLazy","RouterWeb","exact","path","FirstTimeLoading","Spinner","width","height","App","store","fallback","Boolean","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cad2576f.chunk.js","sourcesContent":["// @flow\nimport { action, thunk, Action, Thunk } from 'easy-peasy'\nimport axios from 'axios'\n\ntype DefaultState = {\n  loading: boolean,\n  error: boolean,\n  errorMessage: null,\n}\n\ntype ImagesStateType = {\n  ...DefaultState,\n  images: Array<any>,\n}\n\ntype ImagesTypes = {\n  defaultState: ImagesStateType,\n  insertImages: Action<ImagesStateType, Array<any>>,\n  error: Action<ImagesStateType, any>,\n  getImages: Thunk<{}, void, any, {}, any>,\n}\n\ntype InfoStateType = {\n  ...DefaultState,\n  info: null,\n}\n\ntype InfoTypes = {\n  defaultState: InfoStateType,\n  insertInfo: Action<InfoStateType, any>,\n  error: Action<InfoStateType, any>,\n  getInfo: Thunk<{}, void, any, {}, any>,\n}\n\nconst images: ImagesTypes = {\n  defaultState: {\n    loading: true,\n    error: false,\n    errorMessage: null,\n    images: [],\n  },\n  insertImages: action((state, payload) => {\n    state.defaultState.loading = false\n    state.defaultState.images = payload\n  }),\n  error: action((state, error) => {\n    state.defaultState.error = true\n    state.defaultState.errorMessage = error\n  }),\n  getImages: thunk(async (actions, payload) => {\n    try {\n      const request = await axios.get('/api/images')\n      actions.insertImages(request.data.images)\n    } catch (error) {\n      actions.error(error)\n    }\n  }),\n  removeImage: thunk(async (actions, payload) => {\n    try {\n      await axios.delete(`/api/images/remove/${payload}`)\n      window.location.reload()\n    } catch (error) {\n      alert(error)\n    }\n  })\n}\n\nconst info: InfoTypes = {\n  defaultState: {\n    loading: true,\n    error: false,\n    errorMessage: null,\n    info: null,\n  },\n  insertInfo: action((state, payload) => {\n    state.defaultState.loading = false\n    state.defaultState.info = payload\n  }),\n  error: action((state, error) => {\n    state.defaultState.error = true\n    state.defaultState.errorMessage = error\n  }),\n  getInfo: thunk(async (actions, payload) => {\n    try {\n      const request = await axios.get('/api/info')\n      actions.insertInfo(request.data.info)\n    } catch (error) {\n      actions.error(error)\n    }\n  })\n}\n\nconst diskUsage = {\n  defaultState: {\n    loading: true,\n    error: false,\n    errorMessage: null,\n    disk: null,\n  },\n  insertDiskUsage: action((state, payload) => {\n    state.defaultState.loading = false\n    state.defaultState.disk = payload\n  }),\n  error: action((state, error) => {\n    state.defaultState.error = true\n    state.defaultState.errorMessage = error\n  }),\n  getDiskUsage: thunk(async (actions, payload) => {\n    try {\n      const request = await axios.get('/api/disk-usage')\n      actions.insertDiskUsage(request.data.disk_usage)\n    } catch(error) {\n      actions.error(error)\n    }\n  })\n}\n\nconst container = {\n  deleteContainer: thunk(async (actions, payload) => {\n    try {\n      await axios.delete(`/api/container/remove/${payload}`)\n      window.location.reload()\n    } catch (error) {\n      alert(error)\n    }\n  })\n}\n\nexport default {\n  images,\n  info,\n  diskUsage,\n  container,\n}\n","import { createStore } from 'easy-peasy'\nimport model from './model'\n\nexport default createStore(\n  model\n)\n","// @flow\nimport * as React from 'react'\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  NavItem,\n  Container,\n  NavLink\n} from 'reactstrap'\n\nfunction TopNavigation(): React.Node {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const toggle = () => setIsOpen(!isOpen)\n\n  return (\n    <div style={{marginBottom: '1rem'}}>\n      <Container>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">Go Dock</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink\n                  href={`https://github.com/adiatma/go-dock`}\n                >\n                  Github\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </Container>\n    </div>\n  )\n}\n\nexport default TopNavigation\n","// @flow\nimport * as React from 'react'\nimport {StoreProvider} from 'easy-peasy'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\nimport {Spinner} from 'reactstrap'\n\nimport store from './store'\nimport TopNavigation from './components/TopNavigation'\n\nconst InfoLazy = React.lazy(() => import('./pages/Info'))\nconst ImagesLazy = React.lazy(() => import('./pages/Images'))\n\nfunction RouterWeb(): React.Node {\n  return (\n    <Router>\n      <>\n        <TopNavigation />\n        <Switch>\n          <Route exact path=\"/\">\n            <InfoLazy />\n          </Route>\n          <Route exact path=\"/images\">\n            <ImagesLazy />\n          </Route>\n        </Switch>\n      </>\n    </Router>\n  )\n}\n\nfunction FirstTimeLoading(): React.Node {\n  return <Spinner style={{width: '3rem', height: '3rem'}} />\n}\n\nfunction App(): React.Node {\n  return (\n    <StoreProvider store={store}>\n      <React.Suspense fallback={<FirstTimeLoading />}>\n        <RouterWeb />\n      </React.Suspense>\n    </StoreProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root: HTMLElement | null = document.getElementById('root')\nif (root) ReactDOM.render(<App />, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}